<template>
  <q-page padding>
    <!-- <div class="q-pa-sm">
      <div class="row">
        <div class="col-8">
          <a href="/home">
            <q-btn
              color="primary"
              flat
              icon="arrow_back"
              label="Cart (3)"
              class="q-pa-xs text-capitalize text-h6"
            />
          </a>
        </div>

        <div class="col-2 flex items-center justify-end">
          <div class="text-subtitle1">Select</div>
        </div>
      </div>

      <div class="text-center">
        <div class="column">
          <div v-for="index in 6" :key="index" class="box">
            <div class="row">
              <div class="col-1">
                <div class="flex items-center justify-center">
                  <q-checkbox v-model="val" />
                </div>
              </div>
              <div class="col-4 q-pa-xs">
                <div class="flex items-center justify-center">
                  <q-img
                    src="https://cdn.quasar.dev/img/mountains.jpg"
                    :ratio="16 / 9"
                  />
                </div>
              </div>
              <div class="col-7 q-pa-xs">
                <div class="text-left">
                  <div class="col">
                    <div class="text-h6">{{ `Title ${index}` }}</div>
                    <div class="text-h6 text-positive">Have</div>
                    <div class="row q-pt-lg">
                      <div class="col">
                        <q-btn-group>
                          <q-btn
                            outline
                            color="negative"
                            icon="remove"
                            @click="decrease"
                            size="10px"
                          />
                          <q-btn
                            outline
                            color="white"
                            text-color="black"
                            :label="age"
                            size="12px"
                          />
                          <q-btn
                            outline
                            color="positive"
                            icon="add"
                            @click="increase"
                            size="10px"
                          />
                        </q-btn-group>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <q-separator class="q-mt-md" />

        <div class="row q-pt-md">
          <div class="col-6">
            <div class="flex items-center justify-start">
              <q-checkbox
                v-model="val"
                label="All"
                class="text-subtitle1 text-weight-regular"
              />
            </div>
          </div>
          <div class="col-3">
            <div
              class="flex items-center justify-end q-mt-sm q-pr-sm text-subtitle1"
            >
              Total 6
            </div>
          </div>
          <div class="col-3 bg-positive">
            <div
              class="flex items-center justify-center text-uppercase q-mt-sm text-white text-subtitle1 text-weight-bold"
            >
              Comfirm
            </div>
          </div>
        </div>
      </div>
    </div> -->
    
      <!-- Data completed -->
      <q-table
        title="List of Your Cart"
        :columns="columns"
        :rows="rows"
        row-key="id"
        :pagination="paginations"
      >
        <template #body="props">
          <q-tr :props="props">
            <q-td key="id" :props="props"> {{ props.row.id }}</q-td>
            <q-td key="user_id" :props="props"> {{ props.row.user_id }}</q-td>
            <q-td key="equip_name" :props="props"> {{ props.row.equip_name }}</q-td>
            <q-td key="amount" :props="props"> {{ props.row.amount }}</q-td>
          </q-tr>
        </template>
      </q-table>
  </q-page>
</template>

<script>
import { defineComponent, ref } from "vue";

export default defineComponent({
  name: "CheckoutPage",
  data() {
    return {
      dataReady: false,
      rows: [],
      columns: [
        {
          name: "id",
          label: "ID",
          field: "id",
          align: "center",
          sortable: true,
        },
        {
          name: "user_id",
          label: "User ID",
          field: "user_id",
          align: "left",
          sortable: true,
        },
        {
          name: "equip_name",
          label: "Equipment Name",
          field: "equip_name",
          align: "left",
          sortable: true,
        },
        {
          name: "amount",
          label: "Amount",
          field: "amount",
          align: "left",
          sortable: true,
        },
      ],
      paginations: { rowsPerPage: 7 },
    };
  },
  
  setup() {
    const fetchData = async () => {
      loading.value = true;
      const token = localStorage.getItem("accessToken");

      try {
        const response = await fetch(
          `http://localhost:3000/api/cart/${user_id}`,
          {
            headers: {
              "x-access-token": token,
            },
          }
        );

        if (!response.ok) {
          throw new Error(`Request failed with status ${response.status}`);
        }

        // const contentType = response.headers.get("content-type");

        // if (contentType && contentType.includes("application/json")) {
        //   const data = await response.json();

        //   // Fetch images for each item in data
        //   await Promise.all(data.map(async (item) => {
        //     const imgResponse = await fetch(`http://localhost:3000/api/file/${item.img_url}`);

        //     if (imgResponse.ok) {
        //       const imgBlob = await imgResponse.blob();
        //       const imgUrl = URL.createObjectURL(imgBlob);
        //       item.imgUrl = imgUrl;
        //     } else {
        //       console.warn(`Failed to fetch image for ${item.img_url}`);
        //     }
        //   }));

        //   // Update rows with the modified data
        //   rows.value = data;
        // } else {
        //   const textData = await response.text();
        //   console.warn(`Received non-JSON response: ${textData}`);
        // }
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        loading.value = false;
      }
    };

    const age = ref(0);
    return {
      val: ref(false),
      age: age,
    };
  },
  methods: {
    increase() {
      this.age += 1;
    },
    decrease() {
      this.age -= 1;
    },
  },
});
</script>

<style scoped>
.box {
  padding: 5px;
  height: 150px;
  max-height: 250px;
  background-color: rgba(61, 221, 205, 0.2);
  border-radius: 10px;
  margin: 4px;
}
</style>
